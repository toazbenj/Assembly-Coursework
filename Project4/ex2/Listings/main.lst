


ARM Macro Assembler    Page 1 ASM Memory Access Instruction Examples


    1 00000000                 TTL              ASM Memory Access Instruction E
xamples
    2 00000000         ;*******************************************************
                       ********
    3 00000000         ;Many variations of Load/Store/Move instructions
    4 00000000         ;copying data from ROM & storing to RAM
    5 00000000         ; //By A.Mason, 2015 //
    6 00000000         ;*******************************************************
                       ********
    7 00000000         ;Assembler directives
    8 00000000                 THUMB
    9 00000000         ;*******************************************************
                       ********
   10 00000000         ;EQUates
   11 00000000         ;Vectors
   12 00000000 000000C0 
                       VECTOR_TABLE_SIZE
                               EQU              0x000000C0  ;KL25Z
   13 00000000 00000004 
                       VECTOR_SIZE
                               EQU              4           ;Bytes per vector
   14 00000000         ;Memory
   15 00000000 00000100 
                       SSTACK_SIZE
                               EQU              0x00000100
   16 00000000         ;NVIC
   17 00000000 E000E180 
                       ICER    EQU              0xE000E180
   18 00000000         ;*******************************************************
                       ***************
   19 00000000         ;Vector Table Mapped to Address 0 at Reset
   20 00000000         ;Linker requires __Vectors to be exported
   21 00000000                 AREA             RESET, DATA, READONLY
   22 00000000                 EXPORT           __Vectors
   23 00000000         __Vectors
   24 00000000 00000000        DCD              SP_INIT     ;stack pointer valu
                                                            e when stack is emp
                                                            ty
   25 00000004 00000000        DCD              Reset_Handler ;reset vector
   26 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 ASM Memory Access Instruction Examples


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               SPACE            (VECTOR_TABLE_SIZE - (2 * VECTO
R_SIZE))
   27 000000C0                 ALIGN
   28 000000C0         ;*******************************************************
                       ***************
   29 000000C0                 AREA             RAM,DATA,READWRITE
   30 00000000         ;Allocate system stack
   31 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 ASM Memory Access Instruction Examples


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 ASM Memory Access Instruction Examples


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       SSTACK  SPACE            SSTACK_SIZE
   32 00000100         SP_INIT
   33 00000100 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       RAM_Data
                               SPACE            64          ;Reserve space for 
                                                            variables in RAM @ 
                                                            label Ram_Data
   34 00000140         
   35 00000140         
   36 00000140         ;*******************************************************
                       ***************
   37 00000140         ;Program
   38 00000140         ;Linker requires Reset_Handler
   39 00000140                 AREA             StudentCode,CODE,READONLY
   40 00000000                 ENTRY
   41 00000000                 EXPORT           Reset_Handler
   42 00000000         
   43 00000000         Reset_Handler
   44 00000000 B672            CPSID            I           ;Mask interrupts
   45 00000002         ; DISABLE INTERRUPTS
   46 00000002 4811            LDR              R0, =ICER   ;R0 = &ICER
   47 00000004 2100            MOVS             R1, #0      ; R1 = 0
   48 00000006 43C9            MVNS             R1, R1      ; R1 = 0xFFFFFFFF
   49 00000008 6001            STR              R1, [R0, #0] 



ARM Macro Assembler    Page 5 ASM Memory Access Instruction Examples


                                                            ; ICER = 0xFFFFFFFF
                                                            
   50 0000000A         ; INIT STACK POINTER
   51 0000000A 4810            LDR              R0, =SP_INIT 
                                                            ; load base address
                                                            
   52 0000000C 4685            MOV              SP, R0      ; set SP to base ad
                                                            dress
   53 0000000E         
   54 0000000E         ;*******************************************************
                       ***************
   55 0000000E         ;*******************************************************
                       ***************
   56 0000000E         ;*******************************************************
                       ***************
   57 0000000E         Main
   58 0000000E         ;labels, like "Main" above must be in first, left-most, 
                       column
   59 0000000E         ;anything in first column is assumed to be a label -do n
                       ot start instruction in first column!
   60 0000000E 4810            LDR              R0, =RAM_Data ;R0:= RAM address
                                                             of RAM_Data from R
                                                            OM
   61 00000010 4910            LDR              R1, =ROM_Data ;R1:= ROM address
                                                             of ROM_Data from R
                                                            OM
   62 00000012 4A11            LDR              R2, =0xA1B1C1D1 ;R2:=constant f
                                                            rom ROM via PC-rela
                                                            tive   
   63 00000014         ;   LDR  R2, 0xA1B1C1D1 ;illegal form, constant must hav
                       e '=' prefix
   64 00000014         ;after compiling, the constant values above are stored s
                       tarting at 0x0.0100 (in ROM)
   65 00000014 680B            LDR              R3, [R1]    ;R3:= word value @[
                                                            R1]
   66 00000016 888C            LDRH             R4, [R1,#4] ;R4:= halfword valu
                                                            e @[R1+4], 2 upper 
                                                            bytes of R4 cleared
                                                             (00)
   67 00000018 798D            LDRB             R5, [R1,#6] ;R5:= byte @[R1+6],
                                                             3 upper bytes of R
                                                            5 cleared (00)
   68 0000001A 780D            LDRB             R5, [R1]    ;R5:= byte @[R1], 3
                                                             upper bytes of R5 
                                                            cleared (00)
   69 0000001C         ;sign extending
   70 0000001C         ;ARMv6M only allows sign extended loads with register of
                       fsets
   71 0000001C 4C0F            LDR              R4, =0x0    ;clear R4 as offset
                                                             for next instructi
                                                            on
   72 0000001E 570E            LDRSB            R6, [R1,R4] ;R6:= byte @[R1], 3
                                                             upper bytes sign e
                                                            xtended
   73 00000020 574F            LDRSB            R7, [R1,R5] ;R7:= byte @[R1+4],
                                                             3 upper bytes sign
                                                             extended
   74 00000022 4C0F            LDR              R4, =10     ;load R4 with offse
                                                            t for next instruct



ARM Macro Assembler    Page 6 ASM Memory Access Instruction Examples


                                                            ion
   75 00000024 5F0B            LDRSH            R3, [R1,R4] ;R3:= halfword @[R1
                                                            +10], 2 upper bytes
                                                             sign extended
   76 00000026         ;   LDRSB R5, [R1,#4]  ;illegal form, only register offs
                       ets with sign extend loads
   77 00000026         ;stores
   78 00000026 6002            STR              R2, [R0]    ;store R2 to @[R0] 
                                                            (RAM)
   79 00000028 7102            STRB             R2, [R0,#4] ;store lowest byte 
                                                            of R2 to @[R0+4] (R
                                                            AM)
   80 0000002A 8102            STRH             R2, [R0,#8] ;store lower halfwo
                                                            rd of R2 to @[R0+8]
                                                             (RAM)
   81 0000002C 80C3            STRH             R3, [R0,#6] ;store lower halfwo
                                                            rd of R3 to @[R0+6]
                                                             (RAM)
   82 0000002E         ;moves
   83 0000002E 0013            MOVS             R3, R2      ;copy R2 value to R
                                                            3
   84 00000030 24FF            MOVS             R4,#0xFF    ;largest value avai
                                                            lable for this oper
                                                            ation is 0xFF
   85 00000032 43D5            MVNS             R5, R2      ;R5:= ~R2 (bit inve
                                                            rse of R2)
   86 00000034         ;end code with infinite loop, branch to self
   87 00000034 E7FE            B                .
   88 00000036 00 00           ALIGN
   89 00000038         
   90 00000038         ;*******************************************************
                       ***************
   91 00000038         ;ROM Constants go below
   92 00000038         ;If your program has no constants, omit the section to a
                       void a warning.
   93 00000038         ;*******************************************************
                       ***************
   94 00000038         ROM_Data                             ;address label for 
                                                            constants stored in
                                                             ROM
   95 00000038         ; INSERT CONSTANT DIRECTIVES HERE
   96 00000038 FF00EE04        DCD              0xFF00EE04
   97 0000003C 22DD33CC        DCD              0x22DD33CC
   98 00000040 B4A59687        DCD              0xB4A59687
   99 00000044         ;variations of constant storage directives
  100 00000044 AA 0C BB        DCB              0xAA,12,0xBB
  101 00000047 3A              DCB              2_111010
  102 00000048         ;after compiling, the constant values above are stored s
                       taring at 0x0.00F8 (in ROM)
  103 00000048                 ALIGN                        ; NEEDED AFTER CONS
                                                            TANTS ARE DECLARED
  104 00000048                 END
              E000E180 
              00000000 
              00000000 
              00000000 
              A1B1C1D1 
              00000000 
              0000000A 



ARM Macro Assembler    Page 7 ASM Memory Access Instruction Examples


Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=.\objects\main.d -o.\objects\main.o -IC:\Programs\Keil_v5\ARM\PAC
K\Keil\Kinetis_KLxx_DFP\1.15.0\Device\Include --predefine="__EVAL SETA 1" --pre
define="__UVISION_VERSION SETA 535" --predefine="MKL25Z128xxx4 SETA 1" --list=.
\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 21 in file main.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 23 in file main.s
   Uses
      At line 22 in file main.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RAM 00000000

Symbol: RAM
   Definitions
      At line 29 in file main.s
   Uses
      None
Comment: RAM unused
RAM_Data 00000100

Symbol: RAM_Data
   Definitions
      At line 33 in file main.s
   Uses
      At line 60 in file main.s
Comment: RAM_Data used once
SP_INIT 00000100

Symbol: SP_INIT
   Definitions
      At line 32 in file main.s
   Uses
      At line 24 in file main.s
      At line 51 in file main.s

SSTACK 00000000

Symbol: SSTACK
   Definitions
      At line 31 in file main.s
   Uses
      None
Comment: SSTACK unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Main 0000000E

Symbol: Main
   Definitions
      At line 57 in file main.s
   Uses
      None
Comment: Main unused
ROM_Data 00000038

Symbol: ROM_Data
   Definitions
      At line 94 in file main.s
   Uses
      At line 61 in file main.s
Comment: ROM_Data used once
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 43 in file main.s
   Uses
      At line 25 in file main.s
      At line 41 in file main.s

StudentCode 00000000

Symbol: StudentCode
   Definitions
      At line 39 in file main.s
   Uses
      None
Comment: StudentCode unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ICER E000E180

Symbol: ICER
   Definitions
      At line 17 in file main.s
   Uses
      At line 46 in file main.s
Comment: ICER used once
SSTACK_SIZE 00000100

Symbol: SSTACK_SIZE
   Definitions
      At line 15 in file main.s
   Uses
      At line 31 in file main.s
Comment: SSTACK_SIZE used once
VECTOR_SIZE 00000004

Symbol: VECTOR_SIZE
   Definitions
      At line 13 in file main.s
   Uses
      At line 26 in file main.s
Comment: VECTOR_SIZE used once
VECTOR_TABLE_SIZE 000000C0

Symbol: VECTOR_TABLE_SIZE
   Definitions
      At line 12 in file main.s
   Uses
      At line 26 in file main.s
Comment: VECTOR_TABLE_SIZE used once
4 symbols
349 symbols in table
